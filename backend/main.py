from fastapi import FastAPI, File, UploadFile, HTTPException, BackgroundTasks
from fastapi.middleware.cors import CORSMiddleware
from fastapi.staticfiles import StaticFiles
from fastapi.responses import HTMLResponse, FileResponse
import uvicorn
import os
from dotenv import load_dotenv

# Importar routers e modelos
from routers.analysis import router as analysis_router
from models import AnalysisResponse, ErrorResponse

# Carregar vari√°veis de ambiente
load_dotenv()

# Criar inst√¢ncia do FastAPI
app = FastAPI(
    title="‚öñÔ∏è Sistema de An√°lise Jur√≠dica API",
    description="API para an√°lise automatizada de processos jur√≠dicos com IA",
    version="2.0.0",
    docs_url="/docs",
    redoc_url="/redoc",
    # Aumentar limite de tamanho de arquivo para 100MB
    max_request_size=100 * 1024 * 1024
)

# Configurar CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # Em produ√ß√£o, especificar dom√≠nios espec√≠ficos
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Servir arquivos est√°ticos do frontend
app.mount("/static", StaticFiles(directory="../frontend"), name="static")

# Servir arquivos CSS e JS diretamente
@app.get("/styles.css")
async def get_styles():
    return FileResponse("../frontend/styles.css", media_type="text/css")

@app.get("/script.js")
async def get_script():
    return FileResponse("../frontend/script.js", media_type="application/javascript")

@app.get("/favicon.ico")
async def get_favicon():
    # Retorna um favicon simples ou 404
    from fastapi import HTTPException
    raise HTTPException(status_code=404, detail="Favicon not found")

# Incluir routers
app.include_router(analysis_router, prefix="/api/v1", tags=["an√°lise"])

@app.get("/", response_class=HTMLResponse)
async def serve_frontend():
    """Servir p√°gina principal do frontend"""
    try:
        return FileResponse("../frontend/index.html")
    except FileNotFoundError:
        return HTMLResponse("""
        <html>
            <body>
                <h1>‚öñÔ∏è Sistema de An√°lise Jur√≠dica API</h1>
                <p>Frontend em desenvolvimento...</p>
                <p><a href="/docs">üìñ Documenta√ß√£o da API</a></p>
            </body>
        </html>
        """)

@app.get("/health")
async def health_check():
    """Verifica√ß√£o de sa√∫de da API"""
    return {
        "status": "healthy",
        "service": "Sistema de An√°lise Jur√≠dica",
        "version": "2.0.0"
    }

@app.get("/api/v1/agents")
async def list_agents():
    """Lista todos os agentes dispon√≠veis"""
    return {
        "agents": {
            "defesa": {
                "name": "üõ°Ô∏è Agente Defesa",
                "description": "Analisa argumentos defensivos, teses e alega√ß√µes da defesa"
            },
            "acusacao": {
                "name": "‚öñÔ∏è Agente Acusa√ß√£o",
                "description": "Analisa den√∫ncia, alega√ß√µes do MP e elementos acusat√≥rios"
            },
            "pesquisa": {
                "name": "üìö Agente Pesquisa Jur√≠dica",
                "description": "Extrai legisla√ß√£o, jurisprud√™ncias e cita√ß√µes legais"
            },
            "decisoes": {
                "name": "‚öñÔ∏è Agente Decis√µes Judiciais",
                "description": "Analisa senten√ßas, decis√µes e fundamenta√ß√£o do juiz"
            },
            "web": {
                "name": "üåê Agente Pesquisa Web",
                "description": "Pesquisa jurisprud√™ncias recentes, doutrina e teoria jur√≠dica atual na web"
            },
            "relator": {
                "name": "üìã Agente Relator Consolidado",
                "description": "Consolida informa√ß√µes de todos os agentes em relat√≥rio √∫nico"
            }
        }
    }

# Handler para erros n√£o tratados
@app.exception_handler(Exception)
async def global_exception_handler(request, exc):
    return ErrorResponse(
        error="Erro interno do servidor",
        detail=str(exc)
    )

if __name__ == "__main__":
    # Configura√ß√µes para desenvolvimento
    uvicorn.run(
        "main:app",
        host="0.0.0.0",
        port=8000,
        reload=True,
        log_level="info"
    )